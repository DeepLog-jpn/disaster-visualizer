const regionMap = {
  "ÂåóÊµ∑ÈÅì": "ÂåóÊµ∑ÈÅì",
  "ÈùíÊ£ÆÁúå": "Êù±Âåó", "Â≤©ÊâãÁúå": "Êù±Âåó", "ÂÆÆÂüéÁúå": "Êù±Âåó", "ÁßãÁî∞Áúå": "Êù±Âåó", "Â±±ÂΩ¢Áúå": "Êù±Âåó", "Á¶èÂ≥∂Áúå": "Êù±Âåó",
  "Ëå®ÂüéÁúå": "Èñ¢Êù±", "Ê†ÉÊú®Áúå": "Èñ¢Êù±", "Áæ§È¶¨Áúå": "Èñ¢Êù±", "ÂüºÁéâÁúå": "Èñ¢Êù±", "ÂçÉËëâÁúå": "Èñ¢Êù±", "Êù±‰∫¨ÈÉΩ": "Èñ¢Êù±", "Á•ûÂ•àÂ∑ùÁúå": "Èñ¢Êù±",
  "Êñ∞ÊΩüÁúå": "‰∏≠ÈÉ®", "ÂØåÂ±±Áúå": "‰∏≠ÈÉ®", "Áü≥Â∑ùÁúå": "‰∏≠ÈÉ®", "Á¶è‰∫ïÁúå": "‰∏≠ÈÉ®", "Â±±Ê¢®Áúå": "‰∏≠ÈÉ®", "Èï∑ÈáéÁúå": "‰∏≠ÈÉ®",
  "Â≤êÈòúÁúå": "‰∏≠ÈÉ®", "ÈùôÂ≤°Áúå": "‰∏≠ÈÉ®", "ÊÑõÁü•Áúå": "‰∏≠ÈÉ®",
  "‰∏âÈáçÁúå": "ËøëÁïø", "ÊªãË≥ÄÁúå": "ËøëÁïø", "‰∫¨ÈÉΩÂ∫ú": "ËøëÁïø", "Â§ßÈò™Â∫ú": "ËøëÁïø", "ÂÖµÂ∫´Áúå": "ËøëÁïø", "Â•àËâØÁúå": "ËøëÁïø", "ÂíåÊ≠åÂ±±Áúå": "ËøëÁïø",
  "È≥•ÂèñÁúå": "‰∏≠ÂõΩ", "Â≥∂Ê†πÁúå": "‰∏≠ÂõΩ", "Â≤°Â±±Áúå": "‰∏≠ÂõΩ", "Â∫ÉÂ≥∂Áúå": "‰∏≠ÂõΩ", "Â±±Âè£Áúå": "‰∏≠ÂõΩ",
  "Âæ≥Â≥∂Áúå": "ÂõõÂõΩ", "È¶ôÂ∑ùÁúå": "ÂõõÂõΩ", "ÊÑõÂ™õÁúå": "ÂõõÂõΩ", "È´òÁü•Áúå": "ÂõõÂõΩ",
  "Á¶èÂ≤°Áúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ", "‰ΩêË≥ÄÁúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ", "Èï∑Â¥éÁúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ", "ÁÜäÊú¨Áúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ", "Â§ßÂàÜÁúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ",
  "ÂÆÆÂ¥éÁúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ", "ÈπøÂÖêÂ≥∂Áúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ", "Ê≤ñÁ∏ÑÁúå": "‰πùÂ∑û„ÉªÊ≤ñÁ∏Ñ"
};

const typeColors = {
  "ÂÅúÈõª": "#e11d48",
  "Êñ≠Ê∞¥": "#0ea5e9",
  "ÈÄö‰ø°ÈöúÂÆ≥": "#f59e0b",
  "ÈÅøÈõ£ÊåáÁ§∫": "#10b981"
};

const regionPrefMap = {};
for (const [pref, region] of Object.entries(regionMap)) {
  if (!regionPrefMap[region]) regionPrefMap[region] = [];
  regionPrefMap[region].push(pref);
}

const map = L.map("map").setView([35.6895, 139.6917], 5);
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

let markers = [];
let originalData = [];

fetch("impact.json")
  .then(res => res.json())
  .then(data => {
    originalData = data;

    data.forEach(d => {
      for (const pref in regionMap) {
        if (d.name && d.name.startsWith(pref.slice(0, 2))) {
          d.pref = pref;
          d.region = regionMap[pref];
          break;
        }
      }
    });

    const totalPopulation = data.reduce((sum, c) => sum + (c.population || 0), 0);
    document.getElementById("city-count").textContent = `${data.length} Â∏ÇÂå∫Áî∫Êùë`;
    document.getElementById("total-population").textContent = `${totalPopulation.toLocaleString()} ‰∫∫`;

    renderMarkers(data);

    const legend = L.control({ position: 'bottomright' });
    legend.onAdd = function () {
      const div = L.DomUtil.create('div', 'bg-white p-3 text-sm rounded shadow border');
      div.innerHTML = `<strong class="block mb-2 text-slate-700">üìõ ÁÅΩÂÆ≥Á®ÆÈ°û</strong>` +
        Object.entries(typeColors).map(([type, color]) =>
          `<div class="flex items-center space-x-2 mb-1">
             <span style="background:${color};width:12px;height:12px;display:inline-block;border-radius:9999px;"></span>
             <span class="text-slate-700">${type}</span>
           </div>`
        ).join("");
      return div;
    };
    legend.addTo(map);

    const grouped = {};
    for (const [region, prefs] of Object.entries(regionPrefMap)) {
      grouped[region] = {};
      for (const pref of prefs) {
        grouped[region][pref] = [];
      }
    }

    data.forEach(city => {
      if (city.region && city.pref) {
        grouped[city.region][city.pref].push(city);
      }
    });

    const regionCards = document.getElementById("region-cards");
    for (const [regionName, prefs] of Object.entries(grouped)) {
      const regionId = `region-${regionName.replace(/\s/g, '')}`;
      const flatCities = Object.values(prefs).flat();
      const regionPop = flatCities.reduce((sum, c) => sum + (c.population || 0), 0);
      const regionCityCount = flatCities.length;

      const card = document.createElement("div");
      card.className = "bg-slate-50 border border-slate-200 rounded-xl shadow-sm";
      card.innerHTML = `
        <button class="accordion-trigger w-full px-4 py-3 text-left text-base font-semibold bg-slate-100 rounded-t-xl border-b border-slate-200 flex justify-between items-center hover:bg-slate-200 transition" data-target="${regionId}">
          ${regionName}Ôºà${regionCityCount}Â∏ÇÂå∫Áî∫Êùë„Éª${regionPop.toLocaleString()}‰∫∫Ôºâ
          <span class="accordion-icon">‚ñæ</span>
        </button>
        <div id="${regionId}" class="region-content hidden px-4 pb-4">
          ${Object.entries(prefs).map(([pref, cities]) => {
            const pop = cities.reduce((s, c) => s + (c.population || 0), 0);
            return `<div class="py-2 border-b text-sm text-slate-600">${pref}Ôºö${cities.length}Â∏ÇÂå∫Áî∫Êùë„Éª${pop.toLocaleString()}‰∫∫</div>`;
          }).join("")}
        </div>
      `;
      regionCards.appendChild(card);
    }

    document.querySelectorAll('.accordion-trigger').forEach(btn => {
      btn.addEventListener('click', () => {
        const targetId = btn.getAttribute('data-target');
        document.querySelectorAll('.region-content').forEach(div => {
          if (div.id === targetId) {
            div.classList.toggle('hidden');
            btn.classList.toggle('accordion-open');
          } else {
            div.classList.add('hidden');
            document.querySelector(`[data-target="${div.id}"]`)?.classList.remove('accordion-open');
          }
        });
      });
    });

    const now = new Date().toLocaleString();
    document.getElementById("last-updated").textContent = now;
  })
  .catch(err => {
    console.error("„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", err);
    alert("„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇimpact.json „ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
  });

function renderMarkers(data) {
  markers.forEach(m => map.removeLayer(m));
  markers = [];

  data.forEach(city => {
    if (city.lat && city.lng) {
      const marker = L.circleMarker([city.lat, city.lng], {
        radius: Math.max(6, Math.log(city.population || 1)),
        fillColor: typeColors[city.type] || "#6b7280",
        color: "#fff",
        weight: 1,
        opacity: 1,
        fillOpacity: 0.7
      })
      .addTo(map)
      .bindPopup(`
        <strong>${city.name}</strong><br>
        üë• ${city.population.toLocaleString()}‰∫∫<br>
        üìõ ${city.type || "‰∏çÊòé„Å™ÂΩ±Èüø"}
      `);
      markers.push(marker);
    }
  });
}

document.getElementById("search-box").addEventListener("input", (e) => {
  const keyword = e.target.value.trim().normalize("NFKC");
  document.querySelectorAll(".region-content > div").forEach(el => {
    const content = el.textContent || "";
    const match = content.includes(keyword);
    el.style.display = match || keyword === "" ? "block" : "none";
  });
});

document.getElementById("filter-type").addEventListener("change", (e) => {
  const selected = e.target.value;
  const filtered = selected === "" ? originalData : originalData.filter(c => c.type === selected);
  renderMarkers(filtered);
});
